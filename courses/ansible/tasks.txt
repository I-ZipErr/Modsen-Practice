Практические задания по Ansible

Выполнение работы нужно сохранить в своем Git-репозитории, с рекомендуемой структурой папок:

.

`-- courses

    `-- ansible

Все перечисленные задачи являются целостным проектом, но для удобства навигации по задачам, можно разделять файлы конфигурации по пунктам, т.е по папкам task_1, task_2, task_3 и т.д.

Для выполнения задачи понадобятся виртуальные машины, выбор ПО виртуализации по усмотрению. Инфраструктура должна состоять из контрольного узла (где будет расположен ansible) и двух управляемых узлов (2 виртуальные машины). Контрольным узлом может быть хост машина, или же отдельная виртуальная машина.
Задание 1: Настройка машин

    Запустите 2 виртаульные машины, первая с ОС Ubuntu, вторая с ОС Fedora.

Примечание: Образы виртуальных машин можно использовать без графической оболочки, и работать только через терминал. Такие образы, как правило, занимают меньше места.

    Подготовьте контрольный узел для работы с Ansible одним из способов:
        Запуск отдельной виртуальной машиной и установка Ansible;
        Работа c Ansible через хост машину;
        Работа с Ansible через хост машину с помощью docker контейнера;
    Все узлы должны быть доступны друг для друга на сетевом уровне, в последствии они будут коммуницировать по SSH протоколу.

Задание 2: Настройка SSH соединения

    На каждом из управляемых узлов настроить SSH сервер, с доступом по публичному ключу.
    Сгенерируйте SSH ключ на контрольном узле, зарегестрируйте его в управляемых узлах для возможности подключения без пароля.
    Убедитесь, что Python 3 утсановлен на управляемых узлах.
    Убедитесь в возможности подключения к управляемым узлам (с помощью ssh и ansible - модуль ping).

Важно: ни в коем случае не загружайте в git-репозиторий SSH ключи, использованные в задаче.
Задание 3: Настройка инвентаря

    Создайте файл инвентаря (inventory.ini) с двумя группами: ubuntu и fedora.
    Добавьте управляемые узлы в соответствующие группы.
    Проверьте подключение к узлам с помощью команды ansible all -m ping.

Задание 4: Установка пакетов

    Напишите плейбук (install_packages.yml), который:
        Устанавливает пакет nginx на узле с Ubuntu.
        Устанавливает пакет httpd на узле с Fedora.
    Запустите плейбук и проверьте, что сервисы установлены и запущены.

Задание 5: Управление пользователями

    Создайте плейбук (manage_users.yml), который:
        Добавляет пользователя ansible_user на оба узла.
        Устанавливает для него пароль.
        Добавляет пользователя в группу sudo (для Ubuntu) или wheel (для Fedora).
    Проверьте, что пользователь создан и может выполнять команды с повышенными привилегиями.

Задание 6: Копирование файлов

    Создайте плейбук (copy_files.yml), который:
        Копирует файл index.html (содержание не важно) на оба узла.
        Для Ubuntu размещает его в /var/www/html/.
        Для Fedora размещает его в /var/www/html/.
    Проверьте, что файл доступен через веб-браузер.

Задание 7: Настройка фаервола

    Напишите плейбук (configure_firewall.yml), который:
        Открывает порт 80 на обоих узлах.
        Для Ubuntu использует ufw.
        Для Fedora использует firewalld.
    Проверьте, что порт 80 открыт с помощью команды curl.

Задание 8: Использование шаблонов Jinja2

    Создайте шаблон index.html.j2, который динамически генерирует содержимое страницы в зависимости от имени хоста.
    Напишите плейбук (deploy_template.yml), который:
        Копирует шаблон на оба узла.
        Заменяет переменные в шаблоне на значения имени хоста.
    Проверьте, что страница отображает правильное имя хоста.

Задание 9: Работа с переменными

    Создайте файл переменных (group_vars/all.yml), который определяет:
        Версию пакета nginx для Ubuntu.
        Версию пакета httpd для Fedora.
    Измените плейбук из задания 2, чтобы использовать эти переменные.
    Запустите плейбук и проверьте, что установлены правильные версии пакетов.

Задание 10: Обработка ошибок

    Напишите плейбук (error_handling.yml), который:
        Пытается установить несуществующий пакет на обоих узлах.
        Обрабатывает ошибку и выводит сообщение "Пакет не найден".
    Проверьте, что плейбук корректно обрабатывает ошибку.

Задание 11: Использование ролей

    Создайте роль web_server, которая:
        Устанавливает веб-сервер (nginx для Ubuntu, httpd для Fedora).
        Копирует файл index.html в соответствующую директорию.
        Открывает порт 80.
    Напишите плейбук, который применяет эту роль к обоим узлам.
    Проверьте, что веб-сервер работает.

Задание 12: Использование ролей

    Напишите плейбук (gather_facts.yml), который:
        Собирает факты с обоих узлов.
        Выводит информацию о дистрибутиве и версии ОС.
    Проверьте, что вывод соответствует действительности.
