- name: masters_ports
  hosts: control_plane
  tasks:
    - name: Openning ports -- 6443,2379:2380,10250,10259,10257 for master nodes purposes
      become: true
      ansible.builtin.iptables:
        chain: INPUT
        action: insert
        rule_num: 1
        protocol: tcp
        destination_ports:
          - "6443"
          - "2379:2380"
          - "10250"
          - "10259"
          - "10257"
        jump: ACCEPT



- name: workers_ports
  hosts: workers
  tasks:
    - name: Openning ports -- 10250,30000:32767 for worker nodes purposes
      become: true
      ansible.builtin.iptables:
        chain: INPUT
        action: insert
        rule_num: 1
        protocol: tcp
        destination_ports:
          - "30000:32767"
          - "10250"
        jump: ACCEPT



- name: install_k8s
  hosts: all
  tasks:
  - name: Disable swap for current session
    command: |
     swapoff -a
    become: true

  - name: Disable swap permanently, persist reboots
    become: true
    ansible.builtin.replace:
      path: /etc/fstab
      regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
      replace: '#\1\2\3swap\4'
      backup: yes

  - name: Allowing overlay and br_netfilter kernel modules to boot
    become: true
    ansible.builtin.blockinfile:
      block: |
        overlay
        br_netfilter
      path: /etc/modules-load.d/k8s.conf
      backup: yes
      create: true
#       cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
# overlay
# br_netfilter
# <EOF

  - name: Loading overlay and br_netfilter kernel modules
    become: true
    ansible.builtin.shell: sudo modprobe br_netfilter & sudo modprobe overlay

  - name: Creating conf file for IP forwarding
    become: true
    ansible.builtin.copy:
      dest: /etc/modules-load.d/k8s.conf
      mode: '0755'
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1

  - name: Reload sytem module to apply IP forwarding changes
    ansible.builtin.command: sysctl --system
    become: true

  - name: Installing some packages necessary for kubeadm and docker installation
    become: true
    ansible.builtin.apt:
      update_cache: true
      name:
        - ca-certificates
        - curl
        - apt-transport-https

  - name: Create directory with specific permissions
    become: true
    ansible.builtin.file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Download keyring for docker, setting permissions
    become: true
    ansible.builtin.get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.asc
      mode: '0755'

  - name: Adding Docker repository
    become: true
    ansible.builtin.lineinfile:
      path: /etc/apt/sources.list.d/docker.list
      create: yes
      line: |
        deb [arch="{{ [ansible_architecture] | map('extract', deb_architecture) | first }}" signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable

  - name: Installing Docker engine components
    become: true
    ansible.builtin.apt:
      update_cache: true
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
  
  - name: Downloading CRI-Dockerd package for Kubernetes
    become: true
    ansible.builtin.get_url:
      url: https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd_{{ cri_dockerd_version }}.{{ cri_dockerd_patch_version }}.ubuntu-jammy_amd64.deb
      dest: /home/cri-dockerd_{{ cri_dockerd_version }}.{{ cri_dockerd_patch_version }}.ubuntu-jammy_amd64.deb
      mode: '0755'

  - name: Install CRI-Docker package
    become: true
    ansible.builtin.apt: 
      deb: /home/cri-dockerd_{{ cri_dockerd_version }}.{{ cri_dockerd_patch_version }}.ubuntu-jammy_amd64.deb

  - name: Starting CRI-Docker, enabling it to run on startup
    become: true
    ansible.builtin.systemd_service:
      name: cri-docker.socket
      state: started
      enabled: true

  - name: Configuring Docker cgroup driver, making it to be systemd
    become: true
    ansible.builtin.copy:
      force: true
      dest: /etc/docker/daemon.json
      content: |
        {
        "exec-opts": ["native.cgroupdriver=systemd"]
        }
      # validate: 

  - name: Applying cgroup driver configuration
    become: true
    ansible.builtin.systemd_service:
      name: docker
      state: restarted
      daemon_reload: true
      enabled: true

  - name: Adding Kubernetes {{ kubernetes_version }} keyring (without dearmor!)
    become: true
    ansible.builtin.get_url:
      url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
      dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc

  - name: Adding Kubernetes {{ kubernetes_version }} repository
    become: true
    ansible.builtin.apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
      state: present
      filename: kubernetes

  - name: Installing Kubernetes bootstrap
    become: true
    ansible.builtin.apt:
      update_cache: true
      name:
        - kubelet
        - kubeadm
        - kubectl

  - name: Preventing kubelet from unexpected updates
    become: true
    ansible.builtin.dpkg_selections:
      name: kubelet
      selection: hold

  - name: Preventing kubeadm from unexpected updates
    become: true
    ansible.builtin.dpkg_selections:
      name: kubeadm
      selection: hold

  - name: Preventing kubectl from unexpected updates
    become: true
    ansible.builtin.dpkg_selections:
      name: kubectl
      selection: hold




- name: Init master
  hosts: control_plane
  tasks:
    - name: Init master
      become: true
      ansible.builtin.shell: kubeadm init --apiserver-advertise-address=172.16.0.1 --cri-socket=unix:///var/run/cri-dockerd.sock --pod-network-cidr=10.244.0.0/16 | grep -A1 "kubeadm join"
      register: join_command_local

    - name: Copy join command to worker nodes
      ansible.builtin.set_fact:
        join_command_global: "{{ join_command_local.stdout }} --cri-socket=unix:///var/run/cri-dockerd.sock"
      delegate_to: "{{ item }}"
      delegate_facts: true  
      loop: "{{ groups['workers'] }}"

    # - name: Copy join command to local file.
    #   become: yes
    #   local_action:
    #     module: copy
    #     content: "{{ join_command.stdout }} --cri-socket=unix:///var/run/cri-dockerd.sock"
    #     dest: /tmp/kubernetes_join_command
    #     # copy content= dest="/tmp/kubernetes_join_command" mode=0777


    - name: Creates directory to allow k8s managment without root priveleges
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory

    - name: Copy Kubernetes conf file with owner and permissions
      become: true
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        remote_src: true
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_env.USER }}"
        group: #unspecified, it uses the current group of the current user unless you are root

    - name: Getting Flannel networking provider
      # become: true
      ansible.builtin.get_url:
        url: https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        dest: "{{ ansible_env.HOME }}/kube-flannel.yml"

    - name: Configuring Flannel to use right network interface in vagrant
      # become: true
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/kube-flannel.yml"
        insertafter: "--kube-subnet-mgr$"
        line: "        - --iface=enp0s8"

    # - name: Await until

    - name: Applying network manager
      # become: true
      ansible.builtin.shell: kubectl apply -f kube-flannel.yml

      # ADD PING!!!

    

- name: join_cluster
  hosts: workers
  become: yes
  tasks:
    
    - name: Showing join command for 

    
    - name: Join the Worker nodes to the cluster.
      become: yes
      command: "{{ join_command_global }}   "

kubeadm join 172.16.0.1:6443 --token cgqjkw.yhtwhc81hj4bn8io  --discovery-token-ca-cert-hash sha256:23efa6073eb7b0d11b6bed2e04fcaf74a7a97b89cb1affbbc3f9c618e7fbd86f --cri-socket=unix:///var/run/cri-dockerd.sock